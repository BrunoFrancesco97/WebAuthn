(*
************** REGISTRAZIONE ED AUTENTICAZIONE DI CREDENZIALI CLIENT-SIDE *************************
C : Client, S : Server
chal = challenge inviata nella cerimonia per evitare replay attacks
rpID = Relying Party ID
userID = identificativo dell'utente
crID = ID della credenziale creata
info = Informazioni che vengono date dall'utente in un form di registrazione o autenticazione (es. email, username, ecc...), banalmente sintetizzate in una unica variabile
publicKey = chiave pubblica della credenziale creata
secretKey = chiave privata della credenziale creata
pakAuth = chiave pubblica di attestazione, Ã¨ contenuta nel certificato creato dall'autenticatore ed utile per verificare la firma di attestazione fatta attraverso la chiave privata spiegata sotto
sakAuth = chiave privata di attestazione usata per firmare le credenziali create dall'autenticatore 
*************
Come avviene lo scambio durante una registrazione: 
0) C -> S : info
--
1) S -> C : (chal,rpID,userID)
2) C -> S : sign((publicKey,chal,pakAuth,crID,rpID),sakAuth)
**************
Come avviene lo scambio durante un'autenticazione: 
0) C -> S : info
--
1) S -> C : (chal,rpID)
2) C -> S : sign((chal,crID,rpID),secretKey)
*)


(****** DEFINIZIONE TIPI ******)
type challenge. (*Tipo che identifica la challenge creata ad ogni cerimonia per evitare replay attacks*)
type attskey. (*Tipo che identifica una chiave privata x firmare*)
type attpkey. (*Tipo che identifica una chiave pubblica x verificare*)
type skey. (*Tipo che identifica una chiave privata*)
type pkey. (*Tipo che identifica una chiave pubblca*)
type keyChannel. (*Tipo che identifica la chiave che cripta il canale di comunicazione*)
(********* DEFINIZIONE VARIABILI ***********)
free c:channel. (*Assumo che il canale di comunicazione sia sicuro*)
(*Se si vuole rendere il canale sicuro, inserire [private] dopo channel*)
free sakAuth : attskey [private]. (*Chiave privata di attestazione dell'autenticatore*)
free pakAuth : attpkey [private]. (*Chiave pubblica di attestazione dell'autenticatore*)
free secretKey : skey [private].  (*Chiave privata di una credenziale*)
free publicKey : pkey [private]. (*Chiave pubblica di una credenziale*)
free crID : bitstring [private]. (*ID della credenziale da registrare o autenticare durante una cerimonia di registrazione*)
free k : keyChannel. (*Chiave di criptazione per canale di comunicazione*)
(**********************)

(********* DEFINIZIONE FUNZIONI ***********)
(*FUNZIONI PER CHIAVI CREDENZIALI*)
fun pk(skey): pkey. (*Data una chiave privata, mi viene ritornata la corrispondente chiave pubblica*)
fun aenc(bitstring, pkey):bitstring. (*Codifico una stringa con chiave pubblica*)
reduc forall m: bitstring, ki: skey; adec(aenc(m,pk(ki)),ki) = m. (*Decodifico un messaaggio criptato*)
(*FUNZIONI PER CHIAVI DI ATTESTAZIONE*)
fun apk(attskey) : attpkey. (*Data una chiave privata, mi viene ritornata la corrispondente chiave pubblica*)
fun signAtt(bitstring,attskey):bitstring. (*Firmo una stringa con chiave privata*)
reduc forall m: bitstring, kis:attskey, kip: attpkey; checksignAtt(signAtt(m,kis),kip) = m.
reduc forall m: bitstring, ki:attskey; getmessAtt(signAtt(m,ki)) = m.
fun sign(bitstring,skey):bitstring. (*Firmo una stringa con chiave privata*)
reduc forall m: bitstring, kis:skey, kip : pkey; checksign(sign(m,kis),kip) = m.
reduc forall m: bitstring, ki:skey; getmess(sign(m,ki)) = m.
(*FUNZIONI PER CRIPTAZIONE CANALE DI COMUNICAZIONE*)
fun sencChannel(bitstring, keyChannel) : bitstring.
reduc forall m: bitstring, ki: keyChannel; sdecChannel(sencChannel(m,ki),ki) = m.

(*EVENTI*)
event createPublicKeyCredentialCreationOptions(challenge,bitstring,bitstring). (*INIZIO SERVER REGISTRAZIONE*)
event createCredential(skey,pkey,challenge,bitstring,bitstring). (*INIZIO CLIENT REGISTRAZIONE*)
event endClientRegistration(pkey,bitstring,bitstring,bitstring). (*FINE CLIENT REGISTRAZIONE*)
event endServerRegistration(pkey). (*FINE SERVER REGISTRAZIONE*)
event createPublicKeyCredentialRequestOptions(challenge,bitstring). (*INIZIO SERVER AUTENTICAZIONE*)
event checkCredential(challenge,bitstring). (*INIZIO CLIENT AUTENTICAZIONE*)
event endClientAuthentication(challenge). (*FINE CLIENT AUTENTICAZIONE*)
event endServerAuthentication(challenge). (*FINE SERVER AUTENTICAZIONE*)
event failedServerAuthentication(). (*FINE SERVER AUTENTICAZIONE FALLITA*)


query chal:challenge,pubK:pkey,secK:skey,credentialID:bitstring,userID:bitstring; inj-event(endServerRegistration(pubK)) ==> inj-event(createCredential(secK,pubK,chal,credentialID,userID)).
query chal:challenge,credentialID:bitstring,rpID:bitstring; inj-event(endServerAuthentication(chal)) ==> inj-event(checkCredential(chal,rpID)).
query chal:challenge; event(endServerAuthentication(chal)).
query attacker(pakAuth).
query attacker(sakAuth).
query attacker(publicKey).
query attacker(secretKey).
query attacker(crID).
query attacker(k).

let client(sakAuth : attskey, pakAuth : attpkey, publicKey : pkey, secretKey : skey, crID : bitstring) =
    (*INIZIO REGISTRAZIONE*)
    new info : bitstring; (*Compilo form, info contiene tutti i dati sintetizzati*)
    out(c,sencChannel(info,k)); (*Invio i dati al server*)
    in(c,pubKeyCredCreat : bitstring);
    let (chal:challenge,rp:bitstring,userID:bitstring) = sdecChannel(pubKeyCredCreat,k) in (*Ricevo PublicKeyCredentialCreation dal server*)
    (*Ricevendo publicKeyCredentialCreationOptions dal server, creo le credenziali attraverso l'autenticatore*)
    event createCredential(secretKey,publicKey,chal,crID,userID);
    (*Create le credenziali, creo PublicKeyCredential e mando al server per validazione*)
    out(c,sencChannel(signAtt((publicKey,chal,pakAuth,crID,rp),sakAuth),k));
    event endClientRegistration(publicKey,crID,rp,userID);
    (*AUTENTICAZIONE*)
    in(c,PublicKeyCredOpt : bitstring); (*Ricevo PublicKeyCredentialRequestOptions dal server*)
    let (chal2:challenge,rp2:bitstring) = sdecChannel(PublicKeyCredOpt,k) in
    (*Ricevendo publicKeyCredentialRequestOptions dal server, cerco le credenziali con cui accedere*)
    event checkCredential(chal2,rp2);
    (*Trovate le credenziali, creo PublicKeyCredential e mando al server per validazione*)
    out(c,sencChannel(sign((chal2,crID,rp2),secretKey),k)); 
    event endClientAuthentication(chal2);  
    0.

let server(rpID : bitstring) =
    (*REGISTRAZIONE*) 
    in(c,info : bitstring); (*Ricevo i dati del form compilato dall'utente*)
    new chal:challenge; (*Creo una challenge per la cerimonia*)
    new userID:bitstring;
    event createPublicKeyCredentialCreationOptions(chal,userID,rpID);
    out(c,sencChannel((chal,rpID,userID),k)); (*Mando al client PublicKeyCredentialCreationOptions*)
    in(c,m : bitstring); (*ricevo m, PublicKeyCredential*)
    let message = sdecChannel(m,k) in
    let (pkUser:pkey,challengeReceived:challenge,pubAttkey:attpkey,cr:bitstring, rp:bitstring) = getmessAtt(message) in
    if chal = challengeReceived && rp = rpID then  (*Prima di tutto controllo che le challenge corrispondano*)
    (
        let value = checksignAtt(message,pubAttkey) in
        event endServerRegistration(pkUser);
        (*INIZIO AUTENTICAZIONE*)
        new chal2:challenge; (**Creo una challenge per la cerimonia*)
        event createPublicKeyCredentialRequestOptions(chal2,rpID);
        out(c,sencChannel((chal2,rpID),k)); (*Mando al client PublicKeyCredentialRequestOptions*)
        in(c,m2 : bitstring); (*ricevo m2, PublicKeyCredential*)
        let message2 = sdecChannel(m2,k) in
        let value2 = checksign(message2,pkUser) in
        let (challengeReceived2:challenge,crID2Received:bitstring,rp2:bitstring) = getmess(message2) in
        if chal2 = challengeReceived2 && rp2 = rpID then  (*Faccio dei check sulla challenge e sul dominio inserito in PublicKeyCredential*)
            event endServerAuthentication(chal2)
        else 
            event failedServerAuthentication)
    else
        event failedServerAuthentication;
    0.


process 
    new rpID : bitstring;
    ((!client(sakAuth,pakAuth,publicKey,secretKey,crID)) | (!server(rpID)))




(*
CON CANALE SICURO:

Query inj-event(endServerRegistration(pubK)) ==> inj-event(createCredential(secK,pubK,chal_2,credentialID,userID_2)) is true.

Query inj-event(endServerAuthentication(chal_2)) ==> inj-event(checkCredential(chal_2,rpID_2)) is true.

Query not event(endServerAuthentication(chal_2)) is false.

Query not attacker(pakAuth[]) is true.

Query not attacker(sakAuth[]) is true.

Query not attacker(secretKey[]) is true.

Query not attacker(publicKey[]) is true.

Query not attacker(crID[]) is true.

Query not attacker(k[]) is true.


CON CANALE NON SICURO:

Query inj-event(endServerRegistration(pubK)) ==> inj-event(createCredential(secK,pubK,chal_2,credentialID,userID_2)) is false.

Query inj-event(endServerAuthentication(chal_2)) ==> inj-event(checkCredential(chal_2,rpID_2)) is false.

Query not event(endServerAuthentication(chal_2)) is false.

Query not attacker(pakAuth[]) is false.

Query not attacker(sakAuth[]) is true.

Query not attacker(publicKey[]) is false.

Query not attacker(crID[]) is false.

Query not attacker(k[]) is false.

*)